#pragma once

enum DEFAULT_KEYWORD { DEFAULT_KEYWORD_COUNT = 0 };

const char *default_keywords[DEFAULT_KEYWORD_COUNT] = {};

enum COMMENT_KEYWORD {
  COMMENT_TODO = 0,
  COMMENT_NOTE,
  COMMENT_FIXME,
  COMMENT_REVIEWME,
  COMMENT_HACK,
  COMMENT_REMOVEME,
  COMMENT_MAYBE,
  COMMENT_EXAMPLE,
  COMMENT_REFACTOR,
  COMMENT_KEYWORD_COUNT
};

const char *comment_keywords[COMMENT_KEYWORD_COUNT] = {
    "TODO",     "NOTE",  "FIXME",   "REVIEWME",  "HACK",
    "REMOVEME", "MAYBE", "EXAMPLE", "REFACTORME"};

enum C_KEYWORD {
  C_ALIGNAS = 0,
  C_ALIGNOF,
  C_ASSERT,
  C_AUTO,
  C_BOOL,
  C_BREAK,
  C_CASE,
  C_CHAR,
  C_CONST,
  C_CONSTEXPR,
  C_CONTINUE,
  C_DEFAULT,
  C_DEFINE,
  C_DO,
  C_DOUBLE,
  C_ELSE,
  C_ENUM,
  C_EXTERN,
  C_FALSE,
  C_FLOAT,
  C_FOR,
  C_GOTO,
  C_IF,
  C_INCLUDE,
  C_INLINE,
  C_INT,
  C_LONG,
  C_NULL,
  C_NULLPTR,
  C_PRAGMA,
  C_REGISTER,
  C_RESTRICT,
  C_RETURN,
  C_SHORT,
  C_SIGNED,
  C_SIZEOF,
  C_STATIC,
  C_STATIC_ASSERT,
  C_STRUCT,
  C_SWITCH,
  C_THREAD_LOCAL,
  C_TRUE,
  C_TYPEDEF,
  C_TYPEOF,
  C_TYPEOF_UNQUAL,
  C_UNION,
  C_UNSIGNED,
  C_VOID,
  C_VOLATILE,
  C_WHILE,
  C_KEYWORD_COUNT
};

const char *c_keywords[C_KEYWORD_COUNT] = {"alignas",
                                           "alignof",
                                           "assert",
                                           "auto",
                                           "bool",
                                           "break",
                                           "case",
                                           "char",
                                           "const",
                                           "constexpr",
                                           "continue",
                                           "default",
                                           "define",
                                           "do",
                                           "double",
                                           "else",
                                           "enum",
                                           "extern",
                                           "false",
                                           "float",
                                           "for",
                                           "goto",
                                           "if",
                                           "include",
                                           "inline",
                                           "int",
                                           "long",
                                           "NULL",
                                           "nullptr",
                                           "pragma",
                                           "register",
                                           "restrict",
                                           "return",
                                           "short",
                                           "signed",
                                           "sizeof",
                                           "static",
                                           "static_assert",
                                           "struct",
                                           "switch",
                                           "thread_local",
                                           "true",
                                           "typedef",
                                           "typeof",
                                           "typeof_unqual",
                                           "union",
                                           "unsigned",
                                           "void",
                                           "volatile",
                                           "while"};
